{
  "hash": "0884b33913669a479b5ffa04eaf07e7b",
  "result": {
    "engine": "knitr",
    "markdown": "Indicator data is from https://madison.apl.wisc.edu/, Lake boundaries are from https://gis-countyofdane.opendata.arcgis.com/pages/water-resources.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nmeta_2022 <- read.csv(file = \"nip_bg_22/nip_metadata_22.csv\")\nshp_2022 <- sf::read_sf(dsn = \"nip_bg_22/nip_bg_22.shp\")\n\nlakes <-  sf::read_sf(dsn = \"LakesPonds/LakesPonds.shp\") %>% dplyr::filter(HYDTYPE == \"Lake\") %>% dplyr::filter(NAME %in% c(\"Lake Mendota\", \"Lake Monona\", \"Lake Wingra\")) %>% head(-1)\n\n# geo_id for Nine/Indian Springs is 550250015024\nNSN <- dplyr::filter(shp_2022, geo_id == \"550250015024\")\nNSN$NAME <- \"Nine Springs\"\n\nggplot() +\n  geom_sf(data = shp_2022, aes(fill = pc_un5)) + \n  geom_sf(data = NSN, color = \"purple\", aes(fill = pc_un5), linewidth = 1) +\n  geom_sf_text(data = NSN, aes(label = NAME), size = 2.5,  nudge_y = -0.012) +\n  geom_sf(data = lakes, color = \"blue\") +\n  geom_sf_text(data = lakes, aes(label = NAME), size = 2.0) +\n  scale_fill_distiller(palette = \"BuPu\", direction = 1) +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        rect = element_blank(),\n        axis.title.y=element_blank(),\n        axis.title.x=element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Indicators_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "Indicators_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}